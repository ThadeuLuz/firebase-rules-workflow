//
// Functions
// ----------------------------------------------------------------------------


/**
 * Checks if user is logged in
 */
imLoggedIn() { 
  auth !== null
}

/**
 * Checks if user has a uid
 */
myUidIs(uid) { 
  imLoggedIn() && auth.uid == uid
}

/**
 * User is our server
 */
imServer() { 
  myUidIs('SERVER') 
}

/**
 * Returns true if matches the user role
 */
myRoleIs(role) {  
  prior(root.users[auth.uid].role) == role 
}


//
// Types
// ----------------------------------------------------------------------------


type Email extends String {
  validate() { this.test(/.+\@.+\..+/) }
}

type DisplayName extends String {
  validate() { this.length < 32 }
}

type Rating extends Number {
  validate() { this >= 1 && this <= 5 }
}

type Role extends String {
  validate() { this === null || this === 'admin' } 
}

type UserPublic {
  photoURL: String | Null,
  displayName: DisplayName,
  rating: Rating,
  read() { imLoggedIn() }  
}

type User {
  public: UserPublic,
  email: Email,
  phoneNumber: String | Null,
  role: Role | Null,
}

//
// Paths
// ----------------------------------------------------------------------------

path / { 
  read() { imServer() } 
}

path /users { 
  read() { myRoleIs('admin') }
}

path /users/{userId} is User {
  read() { myUidIs(userId) } 
  write() { myUidIs(userId) ||  imServer() || myRoleIs('admin') } 
}
